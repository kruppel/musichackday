/*
 *=BEGIN SONGBIRD GPL
 *
 * This file is part of the Songbird web player.
 *
 * Copyright(c) 2005-2011 POTI, Inc.
 * http://www.songbirdnest.com
 *
 * This file may be licensed under the terms of of the
 * GNU General Public License Version 2 (the ``GPL'').
 *
 * Software distributed under the License is distributed
 * on an ``AS IS'' basis, WITHOUT WARRANTY OF ANY KIND, either
 * express or implied. See the GPL for the specific language
 * governing rights and limitations.
 *
 * You should have received a copy of the GPL along with this
 * program. If not, go to http://www.gnu.org/licenses/gpl.html
 * or write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 *
 *=END SONGBIRD GPL
 */

/**
 * \file  LoginUtils.jsm
 * \brief JavaScript source for the Login utility services.
 */

EXPORTED_SYMBOLS = [ "Logins" ];

const Cc = Components.classes;
const CC = Components.Constructor;
const Ci = Components.interfaces;
const Cu = Components.utils;

/**
 * Utilities for JavaScript components to access login information.
 */
var Logins = {
  _loginManager: Cc["@mozilla.org/login-manager;1"]
                   .getService(Ci.nsILoginManager),

  get: function Logins_get(aHostname) {
    // username & password
    var username = "",
        password = "",
        // Query login manager for logins.
        logins = this._loginManager.findLogins({},
                                              aHostname,
                                              "",
                                              null),
        idx = 0,
        length = logins.length;

    for (idx; idx < length; idx++) {
      if (idx==0) {
        // Pop the first username/password.
        username = logins[idx].username;
        password = logins[idx].password;
      } else {
        // Discard the rest.
        this._loginManager.removeLogin(logins[idx]);
      }
    }

    return {username: username, password: password};
  },

  set: function Logins_set(aHostname, aUsername, aPassword, aFields) {
    var logins = this._loginManager.findLogins({},
                                              aHostname,
                                              "",
                                              null),
        usernameField = 'username',
        passwordField = 'password',
        idx = 0,
        length = logins.length,
        nsLoginInfo = new CC("@mozilla.org/login-manager/loginInfo;1",
                             Ci.nsILoginInfo,
                             "init");

    if (aFields) {
      usernameField = aFields.username || usernameField;
      passwordField = aFields.password || passwordField;
    }

    for (idx; idx < length; idx++) {
      this._loginManager.removeLogin(logins[idx]);
    }

    // Set the new login info.
    this._loginManager.addLogin(new nsLoginInfo(aHostname,
                                               "",
                                               null,
                                               aUsername,
                                               aPassword,
                                               usernameField,
                                               passwordField));
  }
};
